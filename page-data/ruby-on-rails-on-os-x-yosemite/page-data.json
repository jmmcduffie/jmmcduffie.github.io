{"componentChunkName":"component---src-templates-post-js","path":"/ruby-on-rails-on-os-x-yosemite/","result":{"data":{"markdownRemark":{"html":"<p>Recently I decided to replace my nearly seven-year-old MacBook Pro with a brand-new one. As I sometimes do in situations like this, I decided to set everything up from scratch rather than restoring from another device or a backup. Since I was running Mavericks on my old laptop, this meant getting a development environment going on a new version of OS X. It was a straight-forward process but I decided to document it for my own reference and share it in case someone else can benefit from it.</p>\n<h2>General Setup</h2>\n<p>The first thing you need for development on a Mac is the Xcode command-line tools. Fortunately, installing them is quite easy these days:</p>\n<pre><code class=\"language-bash\">xcode-select --install # then click “Install”\n</code></pre>\n<p>Using a package manager makes everything a little easier (in my opinion), and I always reach for <a href=\"http://brew.sh\">Homebrew</a>:</p>\n<pre><code class=\"language-bash\">ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\nbrew doctor # and then follow the instructions (if any)\n</code></pre>\n<p>I ran into permission errors the first time I tried to install any packages so I had to <code>chown</code> the <code>/usr/local</code> directory to clear those up.</p>\n<pre><code class=\"language-bash\"># You might need to do this too\nsudo chown -R $(whoami) /usr/local\n</code></pre>\n<p>Once Homebrew is in place you can install <a href=\"http://www.git-scm.com\">Git</a> and <a href=\"http://nodejs.org\">Node.js</a>. Even though I develop in Rails, I constantly find myself in need of Node for front-end work. Also, if you plan on using GitHub’s Atom editor you’ll want Node to enable its command line tools. (For whatever reason, installing <code>node</code> didn’t expose <code>npm</code> to the <code>$PATH</code>, but installing it as <code>npm</code> did.)</p>\n<pre><code class=\"language-bash\">brew install git npm # not ‘node’\n\n# Go ahead and do this if you know you’ll need Grunt\nnpm install -g grunt-cli\n</code></pre>\n<p>You might elect to install Postgres with Homebrew as well, which I have done in the past. This time, though, I decided to give <a href=\"http://postgresapp.com\">Postgres.app</a> a try. After downloading and dragging to the Applications folder, I updated my <code>$PATH</code> to <a href=\"http://postgresapp.com/documentation/cli-tools.html\">enable command-line usage</a>:</p>\n<pre><code class=\"language-bash\"># in ~/.bash_profile\nexport PATH=$PATH:/Applications/Postgres.app/Contents/Versions/9.4/bin\n</code></pre>\n<h2>Ruby Setup</h2>\n<p>Ever since I started learning Ruby and Rails I’ve used <a href=\"http://rvm.io\">RVM</a>. It’s also what my box at work is running. But this time I decided to give <a href=\"https://github.com/sstephenson/rbenv\">rbenv</a> a shot instead. I know other devs who use it, and it’s actually what the Rails team recommends, so I figured it wouldn’t be a bad idea to try it.</p>\n<p>Setting up rbenv is quite simple. I recommend using Homebrew to install it, and unless you plan to manually compile your Ruby versions from source I’d recommend the <code>ruby-build</code> plugin:</p>\n<pre><code class=\"language-bash\">brew install rbenv ruby-build\n\n# in ~/.bash_profile\nexport RBENV_ROOT=/usr/local/var/rbenv\nif which rbenv > /dev/null; then eval \"$(rbenv init -)\"; fi\n</code></pre>\n<p>I elected to install a few additional plugins as well:</p>\n<pre><code class=\"language-bash\">mkdir $RBENV_ROOT/plugins\n\n# gem-rehash\ngit clone https://github.com/sstephenson/rbenv-gem-rehash.git \\\n$RBENV_ROOT/plugins/rbenv-gem-rehash\n\n# default-gems\ngit clone https://github.com/sstephenson/rbenv-default-gems.git \\\n$RBENV_ROOT/plugins/rbenv-default-gems\n\n# binstubs\ngit clone https://github.com/ianheggie/rbenv-binstubs.git \\\n$RBENV_ROOT/plugins/rbenv-binstubs\n</code></pre>\n<p>Regardless of whether you do that or not, you should be all set up to install and run a version of Ruby. I downloaded 2.1.1 for this blog, created <code>.ruby-version</code>, and generated a binstub for Jekyll.</p>\n<pre><code class=\"language-bash\">rbenv install 2.1.1\nrbenv local 2.1.1 # creates .ruby-version\n\nbundle binstubs jekyll\n</code></pre>\n<p>That’s it! It seems like getting up and running with Rails gets easier all the time. And that’s certainly a good thing. Happy coding.</p>\n<hr>\n<p><strong>Shameless Plug:</strong> Are you a Rails developer? Are you interested in work that matters? <a href=\"http://hire.jobvite.com/m?3MOO0hwa\">We’re hiring!</a></p>","frontmatter":{"title":"Ruby on Rails on OS X Yosemite","date":"January 28, 2015"}}},"pageContext":{"slug":"/ruby-on-rails-on-os-x-yosemite/"}}}